/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.CronogramaAtividadesDao;
import dao.CronogramaDao;
import entity.Cronograma;
import entity.CronogramaAtividades;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gustavo
 */
public class CadastroCronograma extends javax.swing.JDialog {
    String identificadorAntigo;
    boolean novo=true;
    public CadastroCronograma(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel20 = new javax.swing.JLabel();
        jAula = new javax.swing.JTextField();
        jConteudo = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jIncluir = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTabelaCronograma = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        jIdentificador = new javax.swing.JTextField();
        jSalvar = new javax.swing.JButton();
        jSair = new javax.swing.JButton();
        jRemover = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel20.setText("Aula");

        jLabel21.setText("Conteudo");

        jIncluir.setText("Incluir");
        jIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jIncluirActionPerformed(evt);
            }
        });

        jTabelaCronograma.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Aula", "ConteÃºdo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTabelaCronograma);
        if (jTabelaCronograma.getColumnModel().getColumnCount() > 0) {
            jTabelaCronograma.getColumnModel().getColumn(0).setMinWidth(100);
            jTabelaCronograma.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTabelaCronograma.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        jLabel22.setText("Identificador");

        jSalvar.setText("Salvar");
        jSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSalvarActionPerformed(evt);
            }
        });

        jSair.setText("Sair");
        jSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSairActionPerformed(evt);
            }
        });

        jRemover.setText("Remover");
        jRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRemoverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jAula, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jConteudo, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jIncluir))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addGap(31, 31, 31)
                                .addComponent(jLabel21))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22)
                            .addComponent(jIdentificador, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jRemover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSalvar)
                        .addGap(18, 18, 18)
                        .addComponent(jSair)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jIdentificador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jConteudo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jIncluir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSalvar)
                    .addComponent(jSair)
                    .addComponent(jRemover))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jIncluirActionPerformed
    
        if(!jAula.getText().isEmpty() || !jConteudo.getText().isEmpty()){
            
            CronogramaAtividades cronogramaAtividades = new CronogramaAtividades();
            
            cronogramaAtividades.setAula(jAula.getText());
            cronogramaAtividades.setConteudo(jConteudo.getText());
            
            DefaultTableModel modeloTabela = (DefaultTableModel) jTabelaCronograma.getModel();
            
            modeloTabela.addRow(new Object[]{
                cronogramaAtividades.getAula(),
                cronogramaAtividades.getConteudo()
            });
        }else{
            JOptionPane.showMessageDialog(this, "Preencha os campos!");
        }
    }//GEN-LAST:event_jIncluirActionPerformed

    private void jSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSairActionPerformed
        dispose();
    }//GEN-LAST:event_jSairActionPerformed

    private void jSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSalvarActionPerformed
        boolean dadosValidos=true;
        
        if(!jIdentificador.getText().isEmpty()){
            dadosValidos=false;
        }
        
        if(!dadosValidos){
            Cronograma cronograma = new Cronograma();
            CronogramaDao cronogramaDao = new CronogramaDao();
            cronograma.setIdentificador(jIdentificador.getText());
            
            //caso esteja sendo criado um novo registro
            if (novo){
                if(cronogramaDao.Insere(cronograma)){

                    CronogramaAtividadesDao cronogramaAtividadesDao = new CronogramaAtividadesDao();
                    List<CronogramaAtividades> listaCronogramaAtividades = new ArrayList<>();

                    int id = cronogramaDao.getIdCronograma(cronograma.getIdentificador());
                    DefaultTableModel modeloTabela = (DefaultTableModel) jTabelaCronograma.getModel();

                    for (int i = 0; i < modeloTabela.getRowCount(); i++) {
                        CronogramaAtividades cronogramaAtividades = new CronogramaAtividades();
                        cronogramaAtividades.setAula(modeloTabela.getValueAt(i, 0).toString());
                        cronogramaAtividades.setConteudo(modeloTabela.getValueAt(i, 1).toString());
                        listaCronogramaAtividades.add(cronogramaAtividades);
                    }

                    for (int i = 0; i < listaCronogramaAtividades.size(); i++) {
                        cronogramaAtividadesDao.Cria(id, listaCronogramaAtividades.get(i));
                    }
                    JOptionPane.showMessageDialog(this, "Cronograma cadastrado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

                }else{
                    JOptionPane.showMessageDialog(this, "Erro ao cadastrar o cronograma.", "Erro ao cadastrar", JOptionPane.WARNING_MESSAGE);
                }                
            }else{ //caso esteja sendo atualizado um registro existente
                int idCronograma = cronogramaDao.getIdCronograma(identificadorAntigo);
                
                //Alterar o registro selecionado na base de dados
                if(cronogramaDao.Altera(idCronograma, cronograma)){

                    CronogramaAtividadesDao cronogramaAtividadesDao = new CronogramaAtividadesDao();
                    List<CronogramaAtividades> listaCronogramaAtividades = new ArrayList<>();

                    DefaultTableModel modeloTabela = (DefaultTableModel) jTabelaCronograma.getModel();
                    
                    //Alimenta a lista que sera enviada para a tabela CRONOGRAMA_ATIVIDADES
                    for (int i = 0; i < modeloTabela.getRowCount(); i++) {
                        CronogramaAtividades cronogramaAtividades = new CronogramaAtividades();
                        cronogramaAtividades.setAula(modeloTabela.getValueAt(i, 0).toString());
                        cronogramaAtividades.setConteudo(modeloTabela.getValueAt(i, 1).toString());
                        listaCronogramaAtividades.add(cronogramaAtividades);
                    }

                    cronogramaAtividadesDao.Remove(idCronograma);
                    //Inclui os registros na tabela CRONOGRAMA_ATIVIDADES
                    for (int i = 0; i < listaCronogramaAtividades.size(); i++) {
                        cronogramaAtividadesDao.Cria(idCronograma, listaCronogramaAtividades.get(i));
                    }
                    JOptionPane.showMessageDialog(this, "Cronograma alterado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

                }else{
                    JOptionPane.showMessageDialog(this, "Erro ao alterar o cronograma.", "Erro ao alterar", JOptionPane.WARNING_MESSAGE);
                }
            }

        }else{
            JOptionPane.showMessageDialog(this, "Preencha os campos!");
        }
    }//GEN-LAST:event_jSalvarActionPerformed

    private void jRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRemoverActionPerformed
                int index=-1;
        
        DefaultTableModel modeloTabela = (DefaultTableModel) jTabelaCronograma.getModel();
        
        index=jTabelaCronograma.getSelectedRow();
      
        if(index!=-1){
            modeloTabela.removeRow(index);
            }else{
            JOptionPane.showMessageDialog(this, "Selecione um item para excluir");
        }
    }//GEN-LAST:event_jRemoverActionPerformed
    public void AlteraCronograma(String identificador){
        CronogramaDao cronogramaDao = new CronogramaDao();
        Cronograma cronograma = new Cronograma();
        CronogramaAtividadesDao cronogramaAtividadesDao = new CronogramaAtividadesDao();
        
        int idCronograma = cronogramaDao.getIdCronograma(identificador);
        
        cronograma= cronogramaDao.getCronograma(idCronograma);
                
        if(!cronograma.getIdentificador().isEmpty()){
           jIdentificador.setText(cronograma.getIdentificador());
           
           //VariÃ¡vel utilizada na hora de recuperar o id do cronograma baseado no identificador original.
           identificadorAntigo= jIdentificador.getText();
           
           DefaultTableModel modeloTabela = (DefaultTableModel) jTabelaCronograma.getModel();
           
           for(CronogramaAtividades cronogramaAtividades : cronogramaAtividadesDao.getLista(idCronograma)){
               modeloTabela.addRow(new Object[]{
                   cronogramaAtividades.getAula(),
                   cronogramaAtividades.getConteudo()
               });
           }
           
           novo=false;
        
        }else{
            JOptionPane.showMessageDialog(this, "Erro ao buscar cronograma.");
        }
    }
     public void ConsultaCronograma(String identificador){
        CronogramaDao cronogramaDao = new CronogramaDao();
        Cronograma cronograma = new Cronograma();
        CronogramaAtividadesDao cronogramaAtividadesDao = new CronogramaAtividadesDao();
        
        int idCronograma = cronogramaDao.getIdCronograma(identificador);
        
        cronograma= cronogramaDao.getCronograma(idCronograma);
                
        if(!cronograma.getIdentificador().isEmpty()){
           jIdentificador.setText(cronograma.getIdentificador());
           
           DefaultTableModel modeloTabela = (DefaultTableModel) jTabelaCronograma.getModel();
           
           for(CronogramaAtividades cronogramaAtividades : cronogramaAtividadesDao.getLista(idCronograma)){
               modeloTabela.addRow(new Object[]{
                   cronogramaAtividades.getAula(),
                   cronogramaAtividades.getConteudo()
               });
           }
           jSalvar.setEnabled(false);
           jIncluir.setEnabled(false);
           jRemover.setEnabled(false);
           novo=false;
        
        }else{
            JOptionPane.showMessageDialog(this, "Erro ao buscar cronograma.");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroCronograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroCronograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroCronograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroCronograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CadastroCronograma dialog = new CadastroCronograma(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jAula;
    private javax.swing.JTextField jConteudo;
    private javax.swing.JTextField jIdentificador;
    private javax.swing.JButton jIncluir;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JButton jRemover;
    private javax.swing.JButton jSair;
    private javax.swing.JButton jSalvar;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTabelaCronograma;
    // End of variables declaration//GEN-END:variables
}
